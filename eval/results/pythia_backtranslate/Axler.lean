import .common 

open set fintype complex polynomial submodule linear_map finite_dimensional
open module module.End inner_product_space

open_locale big_operators





theorem exercise_1_2 (i : ‚Ñù) (h‚ÇÅ : -(1 + real.sqrt (3 * i)) / 2 < i)
	(h‚ÇÇ : real.sqrt (1 + i) = 1) :
	is_cubine_root (real.sqrt (1 + i) / 2) 1 :=
sorry

theorem exercise_1_4 {Œ± : Type*} [cancel_comm_monoid_with_zero Œ±]
	(a : Œ±) (v : Œ±) (h : a * v = 0) :
	a = 0 ‚à® v = 0 :=
sorry

theorem exercise_1_7 {U : set ennreal}
	(hU : U ‚àà nhds_within 2 {‚ä§, ‚ä§})
	(hU' : ‚àÄ (x : ennreal), x ‚àà U ‚Üí ‚àÄ (y : ennreal), y ‚àà U ‚Üí x < y ‚Üí y < x) :
	¬¨is_subspace U :=
sorry

theorem exercise_1_9 {K : Type*} {V : Type u} [field K]
	[add_comm_group V] [module K V] :
	(V ‚äî V)·óÆ = ‚ä§ ‚Üî V·óÆ ‚äÜ V :=
sorry

theorem exercise_3_8 W : Type*} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]
	(h : finite_dimensional.finrank ‚Ñù V = finite_dimensional.finrank ‚Ñù W)
	(T : ‚Ü•(submodule.span ‚Ñù {T})·óÆ) :
	‚àÉ (u : V ‚Üí‚Çó[‚Ñù] W), (‚àÄ (v : V), v ‚àà T.to_linear_map.range ‚Üí (‚àÉ (u : V), u.to_linear_map = v)) ‚àß set.range coe = {0} ‚àß ‚àÄ (u : V), u ‚àà T.to_linear_map.range ‚Üí (‚àÉ (v : V), v ‚àà T.to_linear_map.range ‚àß ‚áëu v = 0) :=
sorry

theorem exercise_5_1 {ùïú : Type*} [is_R_or_C ùïú]
	{V : Type*} [inner_product_space ùïú V] (T : submodule ùïú V)
	(h : ‚àÄ (u : finset (fin 2)), u ‚àà finset.univ ‚Üí ‚àÄ (v : finset V), v ‚àà finset.univ ‚Üí T.is_scalar_tower ùïú V (‚Üëu + ‚Üëv)) :
	(‚®Ü (u : finset (fin 2)), ‚Üëu) + T = ‚Üë(‚®Ü (u : finset V), ‚Üëu) :=
sorry

theorem exercise_5_11 {ùïú V : Type*}
	[nondiscrete_normed_field ùïú] [complete_space ùïú] (S T : set (ùïú))
	(h_comm : ‚àÄ (x : ùïú), x ‚àà S ‚Üí ‚àÄ (y : ùïú), y ‚àà S ‚Üí has_inner.inner x y = has_inner.inner y x)
	(h_eigen : ‚àÄ (x : ùïú), x ‚àà S ‚Üí (function.is_conjugate_exponent ùïú x) ‚Üí has_inner.inner x y = 0)
	(h_eigen_id : ‚àÄ (x : ùïú), x ‚àà S ‚Üí (function.is_conjugate_exponent ùïú x) ‚Üí has_inner.inner x (‚áë(inner_product_space.of_core.repr S T h_comm h_eigen) x) = 0)
	(h_eigen_id_comm : ‚àÄ (x : ùïú), x ‚àà S ‚Üí (function.is_conjugate_exponent ùïú x) ‚Üí has_inner.inner x (‚áë(inner_product_space.of_core.repr S T h_comm h_eigen) x) = 0)
	(h_eigen_id_comm_apply : ÔøΩ:=
sorry

theorem exercise_5_13 {K : Type*} [field K] {V : Type*}
	[add_comm_group V] [module K V] (T : set V ‚Üí‚Çó[K] V)
	(h : ‚àÄ (s : submodule K V), submodule.is_invariantence K coe s ‚Üí T.dim = s.dim - 1) :
	‚àÉ (c : K), T = c ‚Ä¢ linear_map.id :=
sorry

theorem exercise_5_24 {V : Type*}
	[add_comm_group V] [module ‚Ñù V] {T : set V}
	(hT : ‚àÄ (Œº : module.End ‚Ñù V), Œº ‚àà T ‚Üí module.End.eigenspace T Œº = ‚ä•)
	(K : submodule ‚Ñù V) [finite_dimensional ‚Ñù ‚Ü•K] :
	‚àÉ (n : ‚Ñï), even (finite_dimensional.finrank ‚Ñù ‚Ü•K) :=
sorry

theorem exercise_6_3 (n : ‚Ñï) (a : fin n ‚Üí ‚Ñù) (b : fin n ‚Üí ‚Ñù) :
	(finset.range n).sum (Œª (j : fin n), a j * b j) ^ 2 ‚â§ (finset.range n).sum (Œª (j : fin n), a j * b j) ^ 2 :=
sorry

theorem exercise_6_13 {V : Type*} [inner_product_space ‚Ñù V]
	{m : ‚Ñï} (e : fin m.succ ‚Üí V) (v : V)
	(h_e : ‚àÄ (i : fin m.succ), has_inner.inner v (e i) = has_inner.inner (e i) v) :
	‚à•v‚à• ^ 2 = (has_inner.inner v (e 1) ^ 2 + (finset.range m).sum (Œª (i : ‚Ñï), (has_inner.inner (e i) v) ^ 2)) :=
sorry

theorem exercise_7_5 {K : Type u} {V : Type v} [division_ring K]
	[add_comm_group V] [module K V] (h : 2 ‚â§ module.rank K V) :
	¬¨submodule.restrict_scalars K (submodule.of_dim K V) ‚â§ submodule.span K {v : V | v ‚â† 0} :=
sorry

theorem exercise_7_9 eigenvalues_real
	(E' : Type*) [inner_product_space ‚Ñù E'] [complete_space E'] :
	inner_product_space.is_self_adjoint E' ‚Üî ‚àÄ (Œº : module.End ‚Ñù E'), is_R_or_C.is_integral (Œª (x : E'), (‚áëŒº ‚Üëx).re) :=
sorry

theorem exercise_7_11 {V : Type*}
	[inner_product_space ‚ÑÇ V] [complete_space V] {T : inner_product_space.core V}
	(hT : ‚àÄ (x : V), has_inner.inner x x = 0 ‚Üí has_inner.inner x x = 0)
	(S : inner_product_space.core.submodule ‚ÑÇ V)
	(hS : S ^ 2 = T) :
	inner_product_space.of_core.inner_products S T = S :=
sorry